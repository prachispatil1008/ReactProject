{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","textStyle","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","console","log","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","border","role","filter","element","protoTypes","PropTypes","string","isRequired","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.97fe4b17.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function About(props) {\r\n    /*let myStyle ={\r\n        color:'black',\r\n        backgroundColor:'#EAFEDD',\r\n        \r\n    }*/\r\n    /*const[myStyle, setMyStyle]=useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n       \r\n    })*/\r\n\r\n    let myStyle ={\r\n        color: props.mode ==='dark' ? 'white':'rgb(70 126 136)',\r\n        backgroundColor: props.mode ==='dark' ? 'rgb(70 126 136)':'white'\r\n    }\r\n    let textStyle={\r\n        color: props.mode ==='dark'?'white':'black'\r\n    }\r\n    \r\n    //const[btnText, setBtnText]=useState(\"Enabled Light Mode\")\r\n\r\n    /*const toggleStyle =()=>{\r\n        if(myStyle.color==='white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'#EAFEDD'\r\n            })\r\n            setBtnText(\"Enabled Dark Mode\")\r\n            \r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border:'1px solid white'\r\n            })\r\n            setBtnText(\"Enabled Light Mode\")\r\n        }\r\n    }*/\r\n    return (\r\n        <>\r\n        \r\n        <div className=\"container\" >\r\n        <h2 className=\"my-3 mx-3\" style={textStyle}>About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                <strong>Analyze your text</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        Textutils gives you a way to analyze your text quickly and efficient. It will gives you word count, character count or various conversions. \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong>Free to use</strong>\r\n                    </button>\r\n                </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            TextUtils is a free character counter tool that provides instant character count and word count statistics for a given text. TextUtils reports the number of words and characters. \r\n                            Thus it is suitable for writing text with words/ character limit.\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser Compatible</strong>\r\n                    </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        This word counter software works in any web browsers such as Chrome, Firebox, Internet Explorer, Safari, Opera.\r\n                        It suits to count characters in facebook, blog, books, excel document, pdf document, eassay etc.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/*<div className=\"container\">\r\n            <button onClick={toggleStyle} className=\"btn btn-primary my-3\">{btnText}</button>\r\n    </div>*/}\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                  <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>\r\n                  </ul>\r\n                  {/*<form className=\"d-flex\">\r\n                      <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                      <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                   </form>*/}\r\n\r\n                  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enabled Dark Mode</label>\r\n                </div>\r\n              </div>\r\n          </div>\r\n      </nav>\r\n        </>\r\n    )\r\n}\r\nNavbar.protoTypes ={\r\n        title: PropTypes.string.isRequired,\r\n        aboutText: PropTypes.string\r\n}\r\n\r\n//default props\r\nNavbar.defaultProps ={\r\n    \r\n    title:'Set Title here',\r\n    aboutText: 'About'\r\n}\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n   const handleUpClick =()=>{\r\n        console.log(\"Uppercase was clicked!!!!!\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!!!\", \"success\");\r\n    }\r\n   const handleOnChange =(event)=>{\r\n       setText(event.target.value);\r\n        console.log(\"handle on change was clicked!!!!!\");   \r\n    }\r\n    const handleLowClick =()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!!!\", \"success\");\r\n    }\r\n    const handleClearClick =()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared!!!\", \"success\");\r\n    }\r\n\r\n    const handleCopy =()=>{\r\n        let text =document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copy text successfully!!!\", \"success\");\r\n    }\r\n    const handleExtraSpace =()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed successfully!!!\", \"success\");\r\n    }\r\n    //const [text, setText]= useState('Enter text here....');\r\n    const [text, setText]= useState('');\r\n    //text =\"new text\"; //wrong way to change text\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h1>{props.heading}</h1>    \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\">{props.heading}</label>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'#ccf0f7':'rgb(73 103 109)', color: props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"8\" ></textarea>\r\n                <button disabled={text.length ===0} className=\"btn btn-primary my-3 mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length ===0} className=\"btn btn-primary my-3 mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length ===0} className=\"btn btn-primary my-3 mx-1\" onClick={handleClearClick}>Clear All Text</button>\r\n                <button disabled={text.length ===0} className=\"btn btn-primary my-3 mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={text.length ===0} className=\"btn btn-primary my-3 mx-1\" onClick={handleExtraSpace}>Handle Extra Spaces</button>\r\n\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h4>Your text summary</h4>\r\n            <div className=\"alert\" style={{color: props.mode==='light'?'black':'white',backgroundColor: props.mode==='light'?'#ccf0f7':'rgb(73 103 109)', border: \"1px solid white\"}} role=\"alert\">\r\n                <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters.</p>\r\n                <p>To read all the words we required {0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes.</p>  \r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h4>Preview</h4>\r\n            <div className=\"alert\" style={{color: props.mode==='light'?'black':'white',backgroundColor: props.mode==='light'?'#ccf0f7':'rgb(73 103 109)', border: \"1px solid white\"}} role=\"alert\">\r\n                <p>{text.length>0?text:\"Nothing to Preview !!!\"}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       <div style={{height:'50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}</div>}\r\n        </div>\r\n     \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode]= useState('light');\n  const [alert, setAlert]= useState(null);\n  const showAlert =(message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(()=>{\n        setAlert(null);\n      }, 1500);\n  }\n  const toggleMode =()=>{\n    if(mode ==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#155d6b';\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n      //document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      showAlert(\"Light mode has been enabled.\", \"success\");\n      document.body.style.backgroundColor = 'white';\n      //document.title = 'TextUtils - Light Mode'\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}></Alert> \n      <div className=\"container my-3\">\n          {/*\n            users ----> Component 1\n            users/home---->----> Component 2\n          */}\n          <Switch>\n              <Route exact path=\"/about\">\n                  <About mode={mode}/> \n              </Route>\n              <Route exact path=\"/\">\n                  <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} />\n              </Route>\n          </Switch>\n      \n            {/*<TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} /> */}\n      </div>\n      </Router>  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}